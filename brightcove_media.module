<?php

/**
 * @file
 * This module provide the hook implementations for the integration with
 * Media module.
 */

define('BRIGHTCOVE_MEDIA_SESSION_VALUE_NAME_UPLOADED', 'video_just_uploaded');
define('BRIGHTCOVE_MEDIA_SESSION_VALUE_NAME_SELECTED', 'selected_video');

/**
 * Implements hook_menu().
 */
function brightcove_media_menu() {
  $items = array();

  $items['brightcove/media/list'] = array(
    'title' => '',
    'page callback' => 'brightcove_media_list',
    'access arguments' => array('browse videos'),
    'type' => MENU_CALLBACK,
  );

  $items['brightcove/media/playlist/list'] = array(
    'title' => 'Available playlist',
    'description' => 'This menu return the available playlist in JSON.',
    'type' => MENU_CALLBACK,
    'access arguments' => array('browse playlists'),
    'page callback' => 'brightcove_media_playlist_list',
  );

  return $items;
}

/**
 * Implements hook_stream_wrappers().
 */
function brightcove_media_stream_wrappers() {
  return array(
    'brightcove' => array(
      'name' => t('Brightcove videos'),
      'class' => 'MediaBrightcoveVideoStreamWrapper',
      'description' => t('Videos provided by Brightcove.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
    'brightcove-playlist' => array(
      'name' => t('Brightcove playlist'),
      'class' => 'MediaBrightcovePlaylistStreamWrapper',
      'description' => t('Playlists provided by Brightcove'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
  );
}

/**
 * Implements hook_media_internet_providers().
 */
function brightcove_media_internet_providers() {
  return array(
    'MediaInternetBrightcoveHandler' => array(
      'title' => 'brightcove',
      'image' => 'http://img.brightcove.com/logo-corporate-new.png',
    ),
  );
}

/**
 * Implements hook_media_parse().
 */
function brightcove_media_media_parse($embed_code) {
  $handler = new MediaInternetBrightcoveHandler($embed_code);
  return $handler->parse($embed_code);
}

/**
 * Implements hook_file_formatter_info().
 */
function brightcove_media_file_formatter_info() {
  $formatters = array();

  $formatters['brightcove_media_video'] = array(
    'label' => t('Brightcove Video'),
    'file types' => array('video'),
    'default settings' => array(),
    'view callback' => 'brightcove_media_file_formatter_video_view',
    'settings callback' => 'brightcove_media_file_formatter_video_settings',
  );

  // $formatters['brightcove_media_playlist'] = array(
  //   'label' => t('Brightcove Playlist'),
  //   'file types' => array('video'),
  //   'default settings' => array(),
  //   'view callback' => 'brightcove_media_file_formatter_playlist_view',
  //   'settings callback' => 'brightcove_media_file_formatter_video_settings',
  // );

  $formatters['brightcove_media_image'] = array(
    'label' => t('Brightcove Preview Image'),
    'file types' => array('video'),
    'default settings' => array(
      'image_style' => '',
    ),
    'view callback' => 'brightcove_media_file_formatter_image_view',
    'settings callback' => 'brightcove_media_file_formatter_image_settings',
  );

  return $formatters;
}

/**
 * Implements hook_theme().
 */
function brightcove_media_theme($existing, $type, $theme, $path) {
  return array(
    'brightcove_media_browser_filter_form' => array(
      'render element' => 'form',
    ),
    'brightcove_media_playlist_browser_form' => array(
      'render element' => 'form',
    ),
    'brightcove_media_embed' => [
      'variables' => [
        'id' => 'brightcove-video',
        'type' => BRIGHTCOVE_EMBED_TYPE_VIDEO,
        'account_id' => NULL,
        'player_id' => NULL,
        'brightcove_id' => NULL,
        'width' => BRIGHTCOVE_DEFAULT_VIDEO_WIDTH,
        'height' => BRIGHTCOVE_DEFAULT_VIDEO_HEIGHT,
        'embed' => 'default',
      ],
      'template' => 'brightcove-media-embed',
    ],

  );
}

/**
 * Implements hook_preprocess_HOOK().
 */
function brightcove_media_preprocess_brightcove_media_embed(&$variables) {
  $client = brightcove_client_load_or_default();
  $variables['account_id'] = $client->account_id;
  $variables['id'] = $variables['id'] . '_html5_api';
  $variables['player_id'] = brightcove_get_default_player();
  $variables['video_id'] = $variables['brightcove_id'];
}

/**
 * Implements hook_media_browser_plugin_info().
 */
function brightcove_media_media_browser_plugin_info() {
  $info = array();

  $info['brightcove'] = array(
    'title' => t('Brightcove'),
    'weight' => 0,
    'class' => 'MediaBrowserBrightcoveVideo',
  );

  // $info['brightcove_playlist'] = array(
  //   'title' => t('Brightcove Playlist'),
  //   'weight' => 2,
  //   'class' => 'MediaBrowserBrightcovePlaylist',
  // );

  return $info;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function brightcove_media_ctools_plugin_api($owner, $api) {
  static $api_versions = array(
    'file_entity' => array(
      'file_default_displays' => 1,
    ),
  );

  return isset($api_versions[$owner][$api]) ?
    array('version' => $api_versions[$owner][$api]) : NULL;
}

/**
 * Implements hook_element_info_alter().
 */
function brightcove_media_element_info_alter(&$type) {
  if (isset($type['media']['#process'])) {
    array_unshift($type['media']['#process'], 'brightcove_media_media_element_process');
  }
}

/**
 * Implements hook_file_type_alter().
 */
function brightcove_media_file_type_alter(&$types, $file) {
  if (strpos($file->filemime, 'brightcove')) {
    $types = array('video');
  }
}

/**
 * Implements hook_media_file_presave().
 */
function brightcove_media_file_presave($file) {
  if (strpos($file->filemime, 'brightcove') && $file->filename == basename($file->uri)) {
    $client = brightcove_client_load_or_default();
    $video = brightcove_load_video($file->filename, $client);
    if ($video->getName()) {
      $file->filename = $video->getName();
    }
  }
}

/**
 * Implements hook_node_presave().
 * (needed for media gallery)
 */
function brightcove_media_node_presave($node) {
  if (isset($node->media_gallery_media[LANGUAGE_NONE])) {
    foreach ($node->media_gallery_media[LANGUAGE_NONE] as &$file) {
      if (isset($file['fid']) && strpos($file['fid'], 'v') === 0) {
        $video_id = substr($file['fid'], 1);
        $candidates = file_load_multiple(array(), array('uri' => "brightcove://{$video_id}"));
        if (count($candidates)) {
          $file['fid'] = array_shift($candidates)->fid;
        }
        else {
          $handler = new MediaInternetBrightcoveHandler($video_id);
          if (!_brightcove_media_session_value_get(BRIGHTCOVE_MEDIA_SESSION_VALUE_NAME_UPLOADED)) {
            $bc = brightcove_initialize();
            try {
              $result = $bc->find('find_video_by_id', $video_id);
              if (count($result)) {
                _brightcove_media_session_value_set(BRIGHTCOVE_MEDIA_SESSION_VALUE_NAME_SELECTED, (object) $result);
              }
            }
            catch (Exception $e) {
              watchdog('brightcove', 'Retrieving media list failed.', array(),
                       WATCHDOG_ERROR);
            }
          }
          $file['fid'] = $handler->save()->fid;
        }
      }
    }
  }
}

/**
 * The brightcove_media_video_file_formatter view callback.
 */
function brightcove_media_file_formatter_video_view($file, $display, $langcode) {
  $scheme = file_uri_scheme($file->uri);
  // WYSIWYG does not yet support video inside a running editor instance.
  if ($scheme == 'brightcove' && empty($file->override['wysiwyg'])) {
    $path = brightcove_get_experiences_js_url();

    $element = array(
      '#theme' => 'brightcove_media_embed',
      '#type' => $scheme,
      '#brightcove_id' => parse_url($file->uri, PHP_URL_HOST),
      '#player' => brightcove_get_default_player(),
      '#attached' => array(
        'js' => array(
          $path => array(
            'type' => 'external',
          ),
        ),
      ),
    );
    // add player override
    if (isset($display['settings']['player']) && $display['settings']['player']) {
      $element['#player'] = $display['settings']['player'];
    }
    foreach (array('width', 'height') as $setting) {
      if (isset($display['settings'][$setting]) && $display['settings'][$setting]) {
        $element['#' . $setting] = $display['settings'][$setting];
      }
    }

    return $element;
  }

  return NULL;
}

/**
 * The brightcove_media_playlist_file_formatter view callback.
 */
function brightcove_media_file_formatter_playlist_view($file, $display, $langcode) {
  $scheme = file_uri_scheme($file->uri);
  // WYSIWYG does not yet support video inside a running editor instance.
  if ($scheme == 'brightcove-playlist' && empty($file->override['wysiwyg'])) {
    $path = brightcove_get_experiences_js_url();

    $element = array(
      '#theme' => 'brightcove_field_embed',
      '#type' => $scheme,
      '#brightcove_id' => parse_url($file->uri, PHP_URL_HOST),
      '#player' => variable_get('brightcove_player_default', ''),
      '#attached' => array(
        'js' => array(
          $path => array(
            'type' => 'external',
          ),
        ),
      ),
    );
    // add player override
    if (isset($display['settings']['player']) && $display['settings']['player']) {
      $element['#player'] = $display['settings']['player'];
    }
    foreach (array('width', 'height') as $setting) {
      if (isset($display['settings'][$setting]) && $display['settings'][$setting]) {
        $element['#' . $setting] = $display['settings'][$setting];
      }
    }

    return $element;
  }

  return NULL;
}

/**
 * The brightcove_media_image file formatter view callback.
 */
function brightcove_media_file_formatter_image_view($file, $display, $langcode) {
  $scheme = file_uri_scheme($file->uri);
  if ($scheme == 'brightcove' || $scheme == 'brightcove-playlist') {
    $video = NULL;
    $id = parse_url($file->uri, PHP_URL_HOST);

    if ($scheme == 'brightcove') {
      $client = brightcove_client_load_or_default();
      $video = brightcove_load_video($id, $client);
      $images = $video->getImages();
      $thumb_src = !empty($images['thumbnail']) ? $images['thumbnail']->getSrc() : '';
    }
    elseif ($scheme == 'brightcove-playlist') {
      $video = brightcove_playlist_load($id);
    }

    $path = NULL;
    if (isset($thumb_src)) {
      $path = $thumb_src;
    }
    else {
      $path = brightcove_get_default_image();
    }

    $element = NULL;

    if (!empty($path)) {
      $element = array(
        '#theme' => 'image',
        '#path' => $path,
      );
    }

    return $element;
  }

  return NULL;
}

/**
 * The brightcove_media_video file formatter settings callback.
 */
function brightcove_media_file_formatter_video_settings($form, $form_state, $settings) {
  $element = array();
  $element['player'] = array(
    '#title' => t('Player'),
    '#type' => 'radios',
    '#options' => brightcove_player_list(),
    '#default_value' => isset($settings['player']) ? $settings['player'] : '',
  );
  $element['width'] = array(
    '#title' => t('Player Width'),
    '#type' => 'textfield',
    '#default_value' => isset($settings['width']) ? $settings['width'] : '',
  );
  $element['height'] = array(
    '#title' => t('Player Height'),
    '#type' => 'textfield',
    '#default_value' => isset($settings['height']) ? $settings['height'] : '',
  );
  return $element;
}

/**
 * The brightcove_media_image file formatter settings callback.
 */
function brightcove_media_file_formatter_image_settings($form, $form_state, $settings) {
  $element = array();
  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#options' => image_style_options(FALSE),
    '#default_value' => isset($settings['image_style']) ? $settings['image_style'] : '',
    '#empty_option' => t('None (original image)'),
  );
  return $element;
}

/**
 * Upload form for brightcove media.
 */
function brightcove_media_upload_form() {
  $bcid = variable_get('brightcove_client_default');
  $client = brightcove_client_load_or_default($bcid);
  $values = array(
    'client' => $client,
    'type' => 'brightcove_video',
  );
  $video_entity = brightcove_video_create($values);
  $brightcove_video_form = drupal_get_form('brightcove_video_form', $video_entity, 'node', '', '');

  $brightcove_video_form['#attached']['js'][] = drupal_get_path('module', 'brightcove_media') . '/js/brightcove_media_ajax_command.js';
  $form['uploadform'] = array(
    '#type' => 'fieldset',
    '#title' => t('Upload video'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
    '#attributes' => array (
      'class' => array('collapsible', 'collapsed'),
      'id' => 'brightcove-upload-form-fieldset-wrapper'
    ),
    '#children' => drupal_render($brightcove_video_form),
    '#description' => t('It takes several minutes (depending on processing time in Brightcove cloud), until video is available after upload. Clicking \'Upload and attach\' uploads video to Brightcove then closes the dialog and attaches the video.'),
  );
  return drupal_render($form);
}

/**
 * Filter form for brightcove media video browser.
 */
function brightcove_media_browser_filter_form($form, &$form_state) {
  $form['searchform'] = array(
    '#type' => 'fieldset',
    '#title' => t('Filter videos'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['searchform']['keywords'] = array(
    '#type' => 'textfield',
    '#title' => t('Keywords'),
    '#size' => 25,
    '#default_value' => '',
    '#description' => t('Comma separated keywords to search for. (do not add space after comma)'),
  );
  $form['searchform']['search'] = array(
    '#type' => 'radios',
    '#title' => t('Search in'),
    '#options' => array(
      'name' => t('Names and descriptions'),
      'tags' => t('Tags: at least one of these'),
      'id' => t('Video ID'),
    ),
    '#default_value' => 'name',
    '#attributes' => array(
      'class' => array('search-radio'),
    ),
    '#description' => t('"Names and descriptions" searches in Video name, short and long descriptions. "Tags" searches in Video associated tags. "Video ID" searches for a specific video by ID.'),
  );
  $form['searchform']['filter'] = array(
    '#type' => 'button',
    '#name' => 'filter',
    '#value' => t('Filter'),
  );
  $form['searchform']['reset'] = array(
    '#type' => 'button',
    '#name' => 'reset',
    '#value' => t('Reset'),
  );
  $form['#prefix'] = '<div id="bc-filter-form">';
  $form['#suffix'] = '</div>';

  $form['submitted-video'] = array(
    '#type' => 'hidden',
    '#default_value' => FALSE,
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#submit' => array('brightcove_media_browser_form_submit'),
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * The brightcove_media_browser_filter_form form theme function.
 *
 * @param $variables
 * @return string
 */
function theme_brightcove_media_browser_filter_form(&$variables) {
  global $pager_total, $pager_page_array;

  $items_per_page = 20;
  $page = isset($_GET['page']) ? intval($_GET['page']) : '0';

  $params = [];
  $search = '';
  $params['page_size'] = $items_per_page;
  $params['page_number'] = $page;
  $result = NULL;

  // Try to load the data from cache.
  $client = brightcove_client_load_or_default();
  $cid = "brightcove:video:list:search:$search";
  foreach ($params as $key => $param) {
    $cid .= ":{$key}:{$param}";
  }
  $cid .= ":client:$client->bcid";
  $content = brightcove_cache_get($cid);

  if (!$content) {

    brightcove_try(function() use(&$result, $client, $search, $items_per_page, $page, &$pager_total) {
      list($cms, ) = _brightcove_create_classes($client);
      $pager_total[0] = ceil($cms->countVideos($search) / $items_per_page);
    });
    $pager_page_array = explode(',', $page);
    $pager_page_array[0] = max(0, min(
      (int)$pager_page_array[0],
      ((int)$pager_total[0]) - 1)
    );
  }

  $pager_vars = [
    'tags' => NULL,
    'element' => 0,
    'parameters' => [],
    'quantity' => $items_per_page,
  ];

  $pager = theme('pager', $pager_vars);

  $output = '';
  $form = $variables['form'];

  $output .= drupal_render($form['searchform']);
  $output .= '<ul id="media-browser-library-list" class="media-list-thumbnails"></ul>';
  $output .= '<div id="status"></div>';
  $output .= drupal_render_children($form);
  $output .= $pager;
  $output .= "<br /><div>" . drupal_render($form['actions']) . "</div>";

  return $output;
}

/**
 * The media browser playlist tab theme function.
 *
 * @param $variables
 * @return string
 */
function theme_brightcove_media_playlist_browser_form(&$variables) {
  $output = NULL;
  $form = $variables['form'];

  $output .= '<div id="container">';
  $output .= drupal_render($form['actions']);
  $output .= '<div id="scrollbox">';
  $output .= '<ul id="media-browser-library-list" class="media-list-thumbnails"></ul>';
  $output .= '<div id="status"></div>';
  $output .= '</div></div>';
  $output .= drupal_render_children($form);

  return $output;
}

/**
 * The brightcove_media_browser_filter_form submit callback function.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function brightcove_media_browser_form_submit($form, &$form_state) {
  $uri = $form_state['values']['submitted-video'];
  try {
    // Save the remote file
    $file = file_uri_to_object($uri, TRUE);
    file_save($file);
  }
  catch (Exception $e) {
    form_set_error('url', $e->getMessage());
    return;
  }

  if (!$file->fid) {
    form_set_error('url', t('The file %file could not be saved. An unknown error has occurred.', array('%file' => $uri)));
    return;
  }
  else {
    $form_state['file'] = $file;
    $form_state['redirect'] = array('media/browser', array('query' => array('render' => 'media-popup', 'fid' => $file->fid)));
  }
}

/**
 * Get the avaliable videos from brightcove.
 *
 * @return JSON list of available brightcove vieos.
 */
function brightcove_media_list() {
  module_load_include('browser.inc', 'media', 'includes/media');

  $default_items_per_page = 20;

  $params =  media_set_browser_params();

  $search = NULL;
  $sort = NULL;
  $limit = isset($params['limit']) ? $params['limit'] : $default_items_per_page;
  $start = isset($params['cursor']) ? $params['cursor'] : 0;

  $media = array();

  $bc_find_params = array();
  if (isset($params['filter'])) {
    switch ($params['filter']['search']) {
      case 'id':
        $method = 'id:';
        $bc_find_params = array('video_ids' => $params['filter']['keywords']);
        break;
      case 'tags':
        $method = 'tags:';
        $bc_find_params = array('or_tags' => $params['filter']['keywords']);
        break;
      case 'name':
      default:
        $method = '';
        $bc_find_params = array('text' => join(' ', explode(',', $params['filter']['keywords'])));
        break;
    }
    if (!empty($params['filter']['keywords'])) {
      $search = $method . urlencode($params['filter']['keywords']);
    }
  }
  $bc_find_params['page_size'] = $limit;
  $bc_find_params['page_number'] = $start;

  // Try to load the data from cache. It uses different key than the cache of field browse results,
  // because it has a different output.
  $cid = 'brightcove:video:list:media';
  foreach ($bc_find_params as $key => $param) {
    $cid .= ":{$key}:{$param}";
  }
  // Create classes prior to retreiving cache so video object can be classed correctly.
  $client = brightcove_client_load_or_default();
  list($cms) = _brightcove_create_classes($client);
  $result = brightcove_cache_get($cid);

  if (!$result) {
    try {
      $result = $cms->listVideos($search, $sort, $limit, $start);
      brightcove_cache_set($cid, $result);
    }
    catch (Exception $e) {
      watchdog('brightcove', 'Retrieving media list failed.', array(),
        WATCHDOG_ERROR);
    }
  }
  if (!empty($result)) {
    foreach ($result as $video) {
      $video_id = $video->getId();
      // Create the file object from the loaded video.
      $uri = file_stream_wrapper_uri_normalize("brightcove://$video_id");
      $file = file_uri_to_object($uri);
      $file->filename = $video->getName();
      $file->type = 'video';
      if (!isset($file->fid)) {
        $file->fid = 0;
      }
      // Add additional properties to file object, needed by media browser js.
      media_browser_build_media_item($file);
      $images = $video->getImages();
      $src = !empty($images['thumbnail']) ? $images['thumbnail']->getSrc() : '';

      $file->preview = l($file->preview, 'media/browser', array(
        'html' => TRUE,
        'attributes' => array(
          'data-uri' => $uri,
        ),
        'query' => array('render' => 'media-popup', 'uri' => $uri),
      ));
      $files[$uri] = $file;
      $media[] = $file;
    }
  }

  // @todo: This doesn't seem to be used.
  drupal_add_js(array('brightcove' => array('files' => $files)), 'setting');
  // Output the file list for media browser.
  drupal_json_output($media);
}

/**
 * Media type element process function.
 *
 * @param $element
 * @param $form_state
 * @return mixed
 */
function brightcove_media_media_element_process(&$element, &$form_state) {
  if (isset($element['#value']['fid']) &&
      strpos($element['#value']['fid'], 'v') === 0
  ) {
    $video_id = substr($element['#value']['fid'], 1);
    $candidates = file_load_multiple(array(),
                                     array('uri' => "brightcove://{$video_id}"));
    if (count($candidates)) {
      $element['#value']['fid'] = array_shift($candidates)->fid;
    }
    else {
      $handler = new MediaInternetBrightcoveHandler($video_id);
      if (!_brightcove_media_session_value_get(BRIGHTCOVE_MEDIA_SESSION_VALUE_NAME_UPLOADED)) {
        $bc = brightcove_initialize();
        try {
          $result = $bc->find('find_video_by_id', $video_id);
          if (count($result)) {
            $file = (object)$result;
            _brightcove_media_session_value_set(BRIGHTCOVE_MEDIA_SESSION_VALUE_NAME_SELECTED, $file);
          }
        }
        catch (Exception $e) {
          watchdog('brightcove', 'Retrieving media list failed.', array(),
                   WATCHDOG_ERROR);
        }
      }
      $element['#value']['fid'] = $handler->save()->fid;
    }

    form_set_value($element, $element['#value'], $form_state);
  }
  return $element;
}

/**
 * Ajax callback for upload form
 *
 * @param $form
 * @param $form_state
 * @return Validated form with messages
 */
function ajax_brightcove_media_upload_callback($form, $form_state) {
  // Make sure it is not set, might be needed if a user changes mind after
  // upload and wants to upload another.
  _brightcove_media_session_value_set(BRIGHTCOVE_MEDIA_SESSION_VALUE_NAME_UPLOADED, NULL);

  $video_id = _brightcove_upload_form_callback($form, $form_state);
  if (empty($video_id) || is_bool($video_id) || !is_scalar($video_id)) {
    return $video_id;
  }

  $video = brightcove_video_load($video_id);
  $uri = file_stream_wrapper_uri_normalize("brightcove://{$video_id}");
  $file = file_uri_to_object($uri);
  $file->filename = $video->name;
  $file->filemime = 'media/brightcove';
  $file->type = 'video';
  if (!isset($file->fid)) {
   $file->fid = 0;
  }
  media_browser_build_media_item($file);

  _brightcove_media_session_value_set(BRIGHTCOVE_MEDIA_SESSION_VALUE_NAME_UPLOADED, $file);

  $commands = array();
  $commands[] = ajax_command_brightcove_media_upload($file);
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * @param $data
 * @param null $settings
 * @return array
 */
function ajax_command_brightcove_media_upload($data, $settings = NULL) {
  return array(
    'command' => 'brightcove_media_upload',
    'data' => $data,
    'settings' => $settings,
  );
}

/**
 * Helper function MediaInternetBrightcoveHandler class getFileObject method.
 *
 * @param $uri
 * @param bool $use_existing
 * @return mixed|StdClass
 */
function brightcove_media_file_uri_to_object($uri, $use_existing = FALSE) {
  if ($use_existing) {
    $query = db_select('file_managed', 'f')
        ->fields('f', array('fid'))
        ->condition('uri', $uri)
        ->execute()
        ->fetchCol();
    if (!empty($query)) {
      $file = file_load(array_shift($query));
    }
  }
  if (!isset($file)) {
    $uri = file_stream_wrapper_uri_normalize($uri);
    $file = new StdClass;
    // This is gagged because some uris will not support it.
    $file->filesize = @filesize($uri);
    $file->timestamp = REQUEST_TIME;
    $file->status = FILE_STATUS_PERMANENT;
    $file->is_new = TRUE;
    $file->uri = $uri;
    $file->filemime = file_get_mimetype($uri);
    $file->uid = $GLOBALS['user']->uid;
    if ($uploaded_video = _brightcove_media_session_value_get(BRIGHTCOVE_MEDIA_SESSION_VALUE_NAME_UPLOADED)) {
      $file->filename = $uploaded_video->filename;
      _brightcove_media_session_value_set(BRIGHTCOVE_MEDIA_SESSION_VALUE_NAME_UPLOADED, NULL);
    }
    else {
      if ($selected_video = _brightcove_media_session_value_get(BRIGHTCOVE_MEDIA_SESSION_VALUE_NAME_SELECTED)) {
        $file->filename = $selected_video->name;
        _brightcove_media_session_value_set(BRIGHTCOVE_MEDIA_SESSION_VALUE_NAME_SELECTED, NULL);
      }
      else {
        $file->filename = basename($uri);
      }
    }
  }
  return $file;
}

/**
 * Media browser brightcove playlist form.
 *
 * @param array $form
 * @param array $form_state
 * @return array $form
 */
function brightcove_media_playlist_browser_form($form, &$form_state) {
  $form['submitted-video'] = array(
    '#type' => 'hidden',
    '#default_value' => FALSE,
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#submit' => array('brightcove_media_browser_form_submit'),
  );

  return $form;
}

/**
 * brightcove/media/playlist/list menu callback function.
 *
 * @return JSON
 *    available playlists.
 */
function brightcove_media_playlist_list() {
  module_load_include('browser.inc', 'media', 'includes/media');
  $media = array();
  $files = array();
  $default_items_per_page = 20;

  $params = drupal_get_query_parameters();

  $limit = isset($params['limit']) ? $params['limit'] : $default_items_per_page;
  $start = isset($params['start']) ? ceil($params['start'] / $limit) : 0;

  $method = 'find_all_playlists';

  $bc_find_params = array();
  $bc_find_params['page_size'] = $limit;
  $bc_find_params['page_number'] = $start;

  // Try to load the data from cache. It uses different key than the cache of field browse results,
  // because it has a different output.
  $cid = 'brightcove:playlist:list:media';
  foreach ($bc_find_params as $key => $param) {
    $cid .= ":{$key}:{$param}";
  }
  $result = brightcove_cache_get($cid);

  if (!$result) {
    try {
      $bc = brightcove_initialize();
      $result = $bc->find($method, $bc_find_params);
      brightcove_cache_set($cid, $result);
    }
    catch (Exception $e) {
      watchdog('brightcove', 'Retrieving media list failed.', array(),
        WATCHDOG_ERROR);
    }
  }

  if (count($result)) {
    foreach ($result as $playlist) {
      $uri = file_stream_wrapper_uri_normalize("brightcove-playlist://{$playlist->id}");
      $file = file_uri_to_object($uri);
      $file->filename = $playlist->name;
      $file->type = 'video';
      if (!isset($file->fid)) {
        $file->fid = 0;
      }
      media_browser_build_media_item($file);
      $file->preview = l($file->preview, 'media/browser', array(
        'html' => TRUE,
        'attributes' => array(
          'data-uri' => $uri,
        ),
        'query' => array('render' => 'media-popup', 'uri' => $uri),
      ));
      $files[$uri] = $file;
      $media[] = $file;
    }
  }

  drupal_add_js(array('brightcove_playlist' => array('files' => $files)), 'setting');
  drupal_json_output($media);
}

/**
 * Helper function to retrieve a value from the session.
 *
 * TODO: This function should be removed and replaced with another storage
 * method that does not rely on the session. This is only a shim at this point
 * to support existing code.
 *
 * @param string $name
 *   The name of the value to retrieve from the session.
 *
 * @return mixed
 *   The value stored in the session, or NULL if not found.
 */
function _brightcove_media_session_value_get($name) {
  $name = _brightcove_media_session_value_name_personalize($name);
  return isset($_SESSION['brightcove_media'][$name])
    ? $_SESSION['brightcove_media'][$name] : NULL;
}

/**
 * Helper function to set a value to the current session.
 *
 * TODO: This function should be removed and replaced with another storage
 * method that does not rely on the session. This is only a shim at this point
 * to support existing code.
 *
 * @param string $name
 *   The name of the value to store in the session.
 * @param mixed $value
 *   The value to store in the session.
 */
function _brightcove_media_session_value_set($name, $value) {
  $name = _brightcove_media_session_value_name_personalize($name);
  // If value is NULL, assume the implementer would like to unset the value.
  if ($value === NULL) {
    unset($_SESSION['brightcove_media'][$name]);
  }
  else {
    $_SESSION['brightcove_media'][$name] = $value;
  }
}

/**
 * Helper function to personalize a session value's name.
 *
 * @param string $name
 *   The name of the session value to personalize.
 *
 * @return string
 *   The personalized name.
 *
 * @throws Exception
 *   When the global user object is not set.
 */
function _brightcove_media_session_value_name_personalize($name) {
  if (!isset($GLOBALS['user']->uid)) {
    throw new Exception('Unable to personalize the session value name.');
  }
  return $name . '_' . $GLOBALS['user']->uid;
}

/**
 * Implements hook_media_browser_plugin_info_alter().
 */
function brightcove_media_media_browser_plugin_info_alter(&$info) {
  if(!empty($info['brightcove'])) {
    $info['brightcove']['weight'] = -20;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function brightcove_media_form_brightcove_video_form_alter(&$form, &$form_state, $form_id) {
  $current_path = current_path();
  if($current_path === 'media/browser') {
    $form['submit']['#value'] = t('Upload');
    $form['submit']['#ajax']['callback'] = 'brightcove_media_ajax_upload_video_callback';
  }
}

function brightcove_media_ajax_upload_video_callback($form, $form_state) {
  // Set required database field for brightcove_callback creation process.
  $form['#parent_entity_type'] = 'node';
  $form['#parent_bundle_name'] = '';
  $form['#parent_field_name'] = '';
  $id = _brightcove_upload_form_callback($form, $form_state);

  $selector = '#upload-messages';
  $data_title = check_plain($form_state['values']['title']);
  $data_id = check_plain($id);
  $data = $id ? "The video <em>{$data_title}</em> has been successfully uploaded" : "There was an error while uploading video <em>{$data_title}</em>";
  //$dialog_type = 'upload';

  $commands = array();
  $commands[] = ajax_command_video_upload_message($selector, $data, NULL);
  return ['#type' => 'ajax', '#commands' => $commands];
}

function ajax_command_video_upload_message($selector = '#upload-messages', $data, $settings = NULL) {
  return array(
    'command' => 'video_upload_message',
    'selector' => $selector,
    'data' => $data,
    'settings' => $settings,
  );
}
